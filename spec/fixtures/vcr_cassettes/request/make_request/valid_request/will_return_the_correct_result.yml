---
http_interactions:
- request:
    method: get
    uri: http://lda.data.parliament.uk/researchbriefings.json?max-date=2017-01-10&min-date=2017-01-01
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - lda.data.parliament.uk
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 23 Jan 2018 14:33:18 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d42ef01822cb87fad19e445893203a4d61516717997; expires=Wed, 23-Jan-19
        14:33:17 GMT; path=/; domain=.parliament.uk; HttpOnly
      X-Response-Id:
      - '49808'
      Access-Control-Allow-Origin:
      - "*"
      Expires:
      - Tue, 23 Jan 2018 14:49:57 GMT
      Etag:
      - W/"dd82847ef92a7694"
      Content-Location:
      - http://lda.data.parliament.uk/researchbriefings.json?max-date=2017-01-10&min-date=2017-01-01
      Server:
      - cloudflare
      Cf-Ray:
      - 3e1b779ef62b35f0-LHR
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 23 Jan 2018 14:34:05 GMT
recorded_with: VCR 4.0.0
